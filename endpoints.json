{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all topics",
    "queries": ["author", "topic", "sort_by", "order"],
    "exampleResponse": {
      "allArticles": [
        {
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "body": "Text from the article..",
          "created_at": 1527695953341,
          "comment_count": 45,
          "votes": 19
        }
      ]
    }
  }
}

"GET /api/users/:username": {
  "description": "serves an object for an user for the specified username",
  "queries": [],
  "exampleResponse": {
    "userObject": {
    "username": "lurker",
    "name": "do_nothing",
    "avatar_url":
      "https://www.golenbock.com/wp-content/uploads/2015/01/placeholder-user.png"
    }
  }
},


"GET /api/articles/:article_id": {
  "description": "serves an object for an article for the specified article_id",
  "queries": [
    "article_id"
  ],
  "exampleResponse": {
    "articleById": {
      "article_id": 1,
      "title": "Living in the shadow of a great man",
      "body": "I find this existence challenging",
      "votes": 100,
      "topic": "mitch",
      "author": "butter_bridge",
      "created_at": 1542284514171,
      "comment_count": 13
    }
  }
},

"PATCH /api/articles/:article_id": {
  "description": "serves an object for an article for the specified article_id with the votes property updated",
  "queries": [],
  "body": {
    "inc_votes": 10
  },
  "exampleResponse": {
    "patchedArticle": {
      "article_id": 1,
      "title": "Living in the shadow of a great man",
      "body": "I find this existence challenging",
      "votes": 101,
      "topic": "mitch",
      "author": "butter_bridge",
      "created_at": 1542284514171,
      "comment_count": 13
    }
  }
},
// PATCH /api/articles/:article_id

// POST /api/articles/:article_id/comments
// GET /api/articles/:article_id/comments


// PATCH /api/comments/:comment_id
// DELETE /api/comments/:comment_id

// GET /api



// ```http
// GET /api/users/:username
// ```

// #### Responds with

// - a user object which should have the following properties:
//   - `username`
//   - `avatar_url`
//   - `name`

// ---

// ```http
// GET /api/articles/:article_id
// ```

// #### Responds with

// - an article object, which should have the following properties:

//   - `author` which is the `username` from the users table
//   - `title`
//   - `article_id`
//   - `body`
//   - `topic`
//   - `created_at`
//   - `votes`
//   - `comment_count` which is the total count of all the comments with this article_id - you should make use of knex queries in order to achieve this

// ---

// ```http
// PATCH /api/articles/:article_id
// ```

// #### Request body accepts

// - an object in the form `{ inc_votes: newVote
// }`

//   - `newVote` will indicate how much the `votes` property in the database should be updated by

//   e.g.

//   `{ inc_votes : 1
// }` would increment the current article's vote property by 1

//   `{ inc_votes : -100
// }` would decrement the current article's vote property by 100

// #### Responds with

// - the updated article

// ---

// ```http
// POST /api/articles/:article_id/comments
// ```

// #### Request body accepts

// - an object with the following properties:
//   - `username`
//   - `body`

// #### Responds with

// - the posted comment

// ---

// ```http
// GET /api/articles/:article_id/comments
// ```

// #### Responds with

// - an array of comments for the given `article_id` of which each comment should have the following properties:
//   - `comment_id`
//   - `votes`
//   - `created_at`
//   - `author` which is the `username` from the users table
//   - `body`

// #### Accepts queries

// - `sort_by`, which sorts the comments by any valid column (defaults to created_at)
// - `order`, which can be set to `asc` or `desc` for ascending or descending (defaults to descending)

// ---

// ```http
// GET /api/articles
// ```

// #### Responds with

// - an `articles` array of article objects, each of which should have the following properties:
//   - `author` which is the `username` from the users table
//   - `title`
//   - `article_id`
//   - `topic`
//   - `created_at`
//   - `votes`
//   - `comment_count` which is the total count of all the comments with this article_id - you should make use of knex queries in order to achieve this

// #### Should accept queries

// - `sort_by`, which sorts the articles by any valid column (defaults to date)
// - `order`, which can be set to `asc` or `desc` for ascending or descending (defaults to descending)
// - `author`, which filters the articles by the username value specified in the query
// - `topic`, which filters the articles by the topic value specified in the query

// ---

// ```http
// PATCH /api/comments/:comment_id
// ```

// #### Request body accepts

// - an object in the form `{ inc_votes: newVote
// }`

//   - `newVote` will indicate how much the `votes` property in the database should be updated by

//   e.g.

//   `{ inc_votes : 1
// }` would increment the current comments's vote property by 1

//   `{ inc_votes : -1
// }` would decrement the current comments's vote property by 1

// #### Responds with

// - the updated comment

// ---

// ```http
// DELETE /api/comments/:comment_id
// ```

// #### Should

// - delete the given comment by `comment_id`

// #### Responds with

// - status 204 and no content

// ---
